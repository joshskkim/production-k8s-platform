# Production-grade CI/CD pipeline for Payment Platform

name: Payment Platform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/payment-service/**'
      - 'kubernetes/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/payment-service/**'
      - 'kubernetes/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/payment-service

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Maven compile
        working-directory: ./apps/payment-service
        run: mvn clean compile -DskipTests

      - name: Run Maven tests
        working-directory: ./apps/payment-service
        run: mvn test

      - name: Generate test coverage report
        working-directory: ./apps/payment-service
        run: mvn jacoco:report

      - name: SonarCloud analysis
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: apps/payment-service

  # Job 2: Build and Security Scan
  build-and-scan:
    name: Build & Container Security
    runs-on: ubuntu-latest
    needs: code-quality
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./apps/payment-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-scan
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: trading_platform_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Wait for services
        run: |
          sleep 10
          pg_isready -h localhost -p 5432 -U postgres
          redis-cli -h localhost -p 6379 ping

      - name: Run integration tests
        working-directory: ./apps/payment-service
        env:
          SPRING_PROFILES_ACTIVE: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: trading_platform_test
          DB_USERNAME: postgres
          DB_PASSWORD: testpass
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          mvn clean test -Dtest="*IntegrationTest"
          mvn clean test -Dtest="*E2ETest"

  # Job 4: Load Testing
  load-testing:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load test against staging
        run: |
          k6 run --vus 50 --duration 2m apps/payment-service/load-test.js
        env:
          API_BASE_URL: ${{ secrets.STAGING_API_URL }}

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-scan, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        run: |
          # Update image in deployment
          sed -i 's|IMAGE_PLACEHOLDER|${{ needs.build-and-scan.outputs.image-tag }}|g' kubernetes/apps/payment-service/deployment.yaml
          
          # Apply to staging namespace
          kubectl apply -f kubernetes/apps/payment-service/ -n staging
          
          # Wait for rollout
          kubectl rollout status deployment/payment-service -n staging --timeout=300s

      - name: Run smoke tests
        run: |
          # Get service URL
          STAGING_URL=$(kubectl get svc payment-service -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Basic health check
          curl -f http://$STAGING_URL/api/v1/payments/health || exit 1
          
          # Test transaction processing
          curl -X POST http://$STAGING_URL/api/v1/payments/process \
            -H "Content-Type: application/json" \
            -d '{"merchantId":"MERCHANT_001","cardNumber":"4111111111111111","amount":100.00}' || exit 1

  # Job 6: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-scan, integration-tests, load-testing]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to production with blue-green
        run: |
          # Update image tag
          sed -i 's|IMAGE_PLACEHOLDER|${{ needs.build-and-scan.outputs.image-tag }}|g' kubernetes/apps/payment-service/deployment.yaml
          
          # Deploy to blue environment
          kubectl apply -f kubernetes/apps/payment-service/ -n production-blue
          kubectl rollout status deployment/payment-service -n production-blue --timeout=300s
          
          # Run production smoke tests
          BLUE_URL=$(kubectl get svc payment-service -n production-blue -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f http://$BLUE_URL/api/v1/payments/health || exit 1
          
          # Switch traffic to blue (green becomes new blue)
          kubectl patch service payment-service -n production -p '{"spec":{"selector":{"version":"blue"}}}'
          
          # Clean up old green deployment
          kubectl delete namespace production-green || true
          kubectl create namespace production-green

  # Job 7: Notify
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#payments-team'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow